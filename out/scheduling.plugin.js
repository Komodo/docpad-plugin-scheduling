// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var Scheduling, _ref;
  return Scheduling = (function(_super) {
    __extends(Scheduling, _super);

    function Scheduling() {
      _ref = Scheduling.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Scheduling.prototype.name = 'scheduling';

    Scheduling.prototype.config = {
      defaultScheduling: true,
      devScheduling: true
    };

    Scheduling.prototype.populateCollections = function(opts, next) {
      var collection, collections, config, database, docpad, env, file, scheduledFiles, _fn, _i, _j, _len, _len1;
      docpad = this.docpad;
      config = this.config;
      env = docpad.getEnvironment();
      database = docpad.getDatabase();
      collections = docpad.collections;
      scheduledFiles = [];
      if (env === "development" && !config.devScheduling) {
        return next();
      }
      for (_i = 0, _len = collections.length; _i < _len; _i++) {
        collection = collections[_i];
        collection.forEach(function(file) {
          var fileDate, filePath, fileScheduled, now;
          fileScheduled = file.get('scheduled');
          fileDate = file.get('date');
          now = new Date();
          filePath = file.getFilePath();
          if (((config.defaultScheduling && (fileScheduled == null)) || ((fileScheduled != null) && fileScheduled)) && fileDate > now) {
            docpad.log('info', "Ignoring scheduled file: " + filePath);
            return scheduledFiles.push(file);
          }
        });
      }
      _fn = function(file) {
        collection.remove(file);
        return database.remove(file);
      };
      for (_j = 0, _len1 = scheduledFiles.length; _j < _len1; _j++) {
        file = scheduledFiles[_j];
        _fn(file);
      }
      return next();
    };

    return Scheduling;

  })(BasePlugin);
};
